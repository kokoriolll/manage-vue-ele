{"remainingRequest":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\src\\permission.js","dependencies":[{"path":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\src\\permission.js","mtime":1555468371484},{"path":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555468404974},{"path":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1555468400994}],"contextDependencies":[],"result":["// import router from './router'\n// import store from './store'\n// import { Message } from 'element-ui'\n// import NProgress from 'nprogress' // progress bar\n// import 'nprogress/nprogress.css' // progress bar style\n// import { getToken } from '@/utils/auth' // get token from cookie\n// NProgress.configure({ showSpinner: false }) // NProgress Configuration\n// const whiteList = ['/login', '/auth-redirect'] // no redirect whitelist\n// router.beforeEach(async(to, from, next) => {\n//   // start progress bar\n//   NProgress.start()\n//   // determine whether the user has logged in\n//   const hasToken = getToken()\n//   if (hasToken) {\n//     if (to.path === '/login') {\n//       // if is logged in, redirect to the home page\n//       next({ path: '/' })\n//       NProgress.done()\n//     } else {\n//       // determine whether the user has obtained his permission roles through getInfo\n//       const hasRoles = store.getters.roles && store.getters.roles.length > 0\n//       if (hasRoles) {\n//         next()\n//       } else {\n//         try {\n//           // get user info\n//           // note: roles must be a object array! such as: ['admin'] or ,['developer','editor']\n//           const { roles } = await store.dispatch('user/getInfo')\n//           // generate accessible routes map based on roles\n//           const accessRoutes = await store.dispatch('permission/generateRoutes', roles)\n//           // dynamically add accessible routes\n//           router.addRoutes(accessRoutes)\n//           // hack method to ensure that addRoutes is complete\n//           // set the replace: true, so the navigation will not leave a history record\n//           next({ ...to, replace: true })\n//         } catch (error) {\n//           // remove token and go to login page to re-login\n//           await store.dispatch('user/resetToken')\n//           Message.error(error || 'Has Error')\n//           next(`/login?redirect=${to.path}`)\n//           NProgress.done()\n//         }\n//       }\n//     }\n//   } else {\n//     /* has no token*/\n//     if (whiteList.indexOf(to.path) !== -1) {\n//       // in the free login whitelist, go directly\n//       next()\n//     } else {\n//       // other pages that do not have permission to access are redirected to the login page.\n//       next(`/login?redirect=${to.path}`)\n//       NProgress.done()\n//     }\n//   }\n// })\n// router.afterEach(() => {\n//   // finish progress bar\n//   NProgress.done()\n// })\n\"use strict\";",null]}