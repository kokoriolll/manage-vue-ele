{"remainingRequest":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\src\\utils\\request.js","dependencies":[{"path":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\src\\utils\\request.js","mtime":1555468700555},{"path":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555468404974},{"path":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1555468400994}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"C:\\\\Users\\\\ASUS\\\\Desktop\\\\project1\\\\manage-vue-ele\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"C:\\\\Users\\\\ASUS\\\\Desktop\\\\project1\\\\manage-vue-ele\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"C:\\\\Users\\\\ASUS\\\\Desktop\\\\project1\\\\manage-vue-ele\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _auth = require(\"@/utils/auth\");\n\n// create an axios instance\nvar service = _axios.default.create({\n  baseURL: '/api',\n  // api 的 base_url\n  // withCredentials: true, // 跨域请求时发送 cookies\n  timeout: 5000 // request timeout\n\n}); // request interceptor\n\n\nservice.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  if ((0, _auth.getToken)()) {\n    // 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改\n    config.headers['authorization'] = (0, _auth.getToken)();\n  }\n\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.log(error); // for debug\n\n  return _promise.default.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\r\n * If you want to get information such as headers or status\r\n * Please return  response => response\r\n*/\n\n/**\r\n * 下面的注释为通过在response里，自定义code来标示请求状态\r\n * 当code返回如下情况则说明权限有问题，登出并返回到登录页\r\n * 如想通过 XMLHttpRequest 来状态码标识 逻辑可写在下面error中\r\n * 以下代码均为样例，请结合自生需求加以修改，若不需要，则可删除\r\n */\nfunction (response) {\n  var res = response.data;\n\n  if (res.code == 1) {\n    return res;\n  } // if (res.code !== 20000) {\n  //   Message({\n  //     message: res.msg || 'error',\n  //     type: 'error',\n  //     duration: 5 * 1000\n  //   })\n  //   // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;\n  //   if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n  //     // 请自行在引入 MessageBox\n  //     // import { Message, MessageBox } from 'element-ui'\n  //     MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\n  //       confirmButtonText: '重新登录',\n  //       cancelButtonText: '取消',\n  //       type: 'warning'\n  //     }).then(() => {\n  //       store.dispatch('user/resetToken').then(() => {\n  //         location.reload() // 为了重新实例化vue-router对象 避免bug\n  //       })\n  //     })\n  //   }\n  //   return Promise.reject(res.message || 'error')\n  // } else {\n  //   return res\n  // }\n\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  (0, _elementUi.Message)({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return _promise.default.reject(error);\n});\nvar _default = service;\nexports.default = _default;",null]}