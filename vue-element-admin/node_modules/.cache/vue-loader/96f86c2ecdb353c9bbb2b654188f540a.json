{"remainingRequest":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\src\\components\\Tinymce\\components\\editorImage.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\src\\components\\Tinymce\\components\\editorImage.vue","mtime":1555241033431},{"path":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555040407437},{"path":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1550018570393},{"path":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555040407437},{"path":"C:\\Users\\ASUS\\Desktop\\project1\\manage-vue-ele\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1555040409456}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// import { getToken } from 'api/qiniu'\r\n\r\nexport default {\r\n  name: 'EditorSlideUpload',\r\n  props: {\r\n    color: {\r\n      type: String,\r\n      default: '#1890ff'\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      dialogVisible: false,\r\n      listObj: {},\r\n      fileList: []\r\n    }\r\n  },\r\n  methods: {\r\n    checkAllSuccess() {\r\n      return Object.keys(this.listObj).every(item => this.listObj[item].hasSuccess)\r\n    },\r\n    handleSubmit() {\r\n      const arr = Object.keys(this.listObj).map(v => this.listObj[v])\r\n      if (!this.checkAllSuccess()) {\r\n        this.$message('请等待所有图片上传成功 或 出现了网络问题，请刷新页面重新上传！')\r\n        return\r\n      }\r\n      this.$emit('successCBK', arr)\r\n      this.listObj = {}\r\n      this.fileList = []\r\n      this.dialogVisible = false\r\n    },\r\n    handleSuccess(response, file) {\r\n      const uid = file.uid\r\n      const objKeyArr = Object.keys(this.listObj)\r\n      for (let i = 0, len = objKeyArr.length; i < len; i++) {\r\n        if (this.listObj[objKeyArr[i]].uid === uid) {\r\n          this.listObj[objKeyArr[i]].url = response.files.file\r\n          this.listObj[objKeyArr[i]].hasSuccess = true\r\n          return\r\n        }\r\n      }\r\n    },\r\n    handleRemove(file) {\r\n      const uid = file.uid\r\n      const objKeyArr = Object.keys(this.listObj)\r\n      for (let i = 0, len = objKeyArr.length; i < len; i++) {\r\n        if (this.listObj[objKeyArr[i]].uid === uid) {\r\n          delete this.listObj[objKeyArr[i]]\r\n          return\r\n        }\r\n      }\r\n    },\r\n    beforeUpload(file) {\r\n      const _self = this\r\n      const _URL = window.URL || window.webkitURL\r\n      const fileName = file.uid\r\n      this.listObj[fileName] = {}\r\n      return new Promise((resolve, reject) => {\r\n        const img = new Image()\r\n        img.src = _URL.createObjectURL(file)\r\n        img.onload = function() {\r\n          _self.listObj[fileName] = { hasSuccess: false, uid: file.uid, width: this.width, height: this.height }\r\n        }\r\n        resolve(true)\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}